import os
import subprocess
import yaml
from pathlib import Path
from github import Github

BACKLOG_FILE = Path("tasks/backlog.yaml")
REPO_NAME = os.getenv("GITHUB_REPOSITORY", "jpierr/ai-siem-agent-full")

def load_backlog():
    if not BACKLOG_FILE.exists():
        print("‚ùå No backlog file found.")
        return []
    with open(BACKLOG_FILE, "r") as f:
        data = yaml.safe_load(f)
    if not data or "tasks" not in data:
        print("‚ö†Ô∏è No tasks found in backlog.")
        return []
    return data["tasks"]

def run(cmd):
    print(f"$ {cmd}")
    subprocess.run(cmd, shell=True, check=True)

def main():
    tasks = load_backlog()
    print(f"‚úÖ Loaded {len(tasks)} task(s).")

    gh = Github(os.getenv("GITHUB_TOKEN"))
    repo = gh.get_repo(REPO_NAME)

    for task in tasks:
        branch = f"agent/{task['id']}"
        print(f"üî® Processing {task['id']} ‚Üí creating branch {branch}")

        # Create branch
        run(f"git checkout -b {branch}")

        # Stub file changes
        for fpath in task["files_touched"]:
            path = Path(fpath)
            path.parent.mkdir(parents=True, exist_ok=True)
            if not path.exists():
                path.write_text(f"# Stub for {task['title']}\n")
                run(f"git add {fpath}")

        # Commit + push
        run(f'git commit -m "agent: stub {task["id"]}" || echo "No changes"')
        run(f"git push origin {branch}")

        # Create PR
        pr_title = f"Agent Task {task['id']}: {task['title']}"
        pr_body = "Auto-generated by agent."
        repo.create_pull(title=pr_title, body=pr_body, head=branch, base="main")
        print(f"‚úÖ PR created for {task['id']}")

if __name__ == "__main__":
    main()
